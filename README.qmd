---
title: "Calculating active travel potential and severance around major transport infrastructure"
format: gfm
execute: 
  cache: true
  echo: false
  message: false
  warning: false
---

```{r}
#| include: false
library(tidyverse)
library(terra)
library(tmap)
```

```{r}
#| eval: false
#| echo: false
remotes::install_github("robinlovelace/styler.equals")
```

This repo builds on work documented in the [srn](https://github.com/acteng/srn) repo, focussing on active travel potential and severance around major transport infrastructure.

# Input datasets

## Major road network

The Strategic Road Network (SRN) and Major Road Network (MRN) are illustrated below (source: [browse tool of ATIP](https://acteng.github.io/atip/browse.html?style=dataviz#6.2/52.917/-1.327)).

![](images/paste-1.png)


```{r}
#| label: dl-mrn
#| include: false
if (!file.exists("mrn.gpkg")) {
  message("Missing the MRN dataset locally, download it from the DfT or releases")
  u = "https://maps.dft.gov.uk/major-road-network-shapefile/Major_Road_Network_2018_Open_Roads.zip"
  f = basename(u)
  if (!file.exists(f)) download.file(u, f)
  unzip(f)
  mrn = sf::read_sf("Major_Road_Network_2018_Open_Roads.shp")
  names(mrn)
  #  [1] "fid_"       "id"         "endNode"    "startNode"  "roadNumber"
  #  [6] "roadNameTO" "fictitious" "roadClassi" "roadFuncti" "formOfWay"
  # [11] "length"     "length_uom" "loop"       "primaryRou" "trunkRoad"
  # [16] "roadClas_1" "name1"      "name1_lang" "name2"      "name2_lang"
  # [21] "roadStruct" "geom_Lengt" "identifier" "geom"
  mrn = mrn |>
    transmute(
      name = name1,
      road_function = roadFuncti,
      form_of_way = formOfWay,
      road_classification = roadClassi,
      infrastructure_type = "MRN"
    )
  sf::st_write(mrn, "mrn.gpkg", delete_dsn = TRUE)
  # Release data:
  if (FASLE) {
    # system("gh release create v1.0 mrn.gpkg")
    # Re-upload with clobber
    system("gh release upload v1.0 mrn.gpkg --clobber")
  }
}
mrn = sf::read_sf("mrn.gpkg")
```

```{r}
#| label: dl-srn
#| include: false
if (!file.exists("srn.gpkg")) {
  message("Missing the SRN dataset locally, download it from the DfT or releases")
  u = "https://api.os.uk/downloads/v1/products/OpenRoads/downloads?area=GB&format=GeoPackage&redirect"
  f = "oproad_gpkg_gb.zip"
  if (!file.exists(f)) download.file(u, f)
  unzip(f)
  list.files("Data")
  # See https://github.com/acteng/atip-data-prep/blob/d2a5d0058932a00e0130048cf407448f4b75a477/layers/srn.py#L6
  # for filter:             "SELECT name_1 as name, geometry FROM road_link WHERE trunk_road"
  # q = "SELECT name_1 as name, geometry FROM road_link WHERE trunk_road"
  # srn = sf::read_sf("Data/oproad_gb.gpkg", query = q) # failed:
  open_roads_national = sf::read_sf("Data/oproad_gb.gpkg", layer = "road_link")
  names(open_roads_national)
  #    [1] "id"                         "fictitious"
  #  [3] "road_classification"        "road_function"
  #  [5] "form_of_way"                "road_classification_number"
  #  [7] "name_1"                     "name_1_lang"
  #  [9] "name_2"                     "name_2_lang"
  # [11] "road_structure"             "length"
  # [13] "length_uom"                 "loop"
  # [15] "primary_route"              "trunk_road"
  # [17] "start_node"                 "end_node"
  # [19] "road_number_toid"           "road_name_toid"
  # [21] "geometry"
  table(open_roads_national$trunk_road)
  srn = open_roads_national |>
    filter(trunk_road) |>
    transmute(
      name = name_1,
      road_function = road_function,
      form_of_way = form_of_way,
      road_classification = road_classification,
      infrastructure_type = "SRN"
    )

  sf::write_sf(srn, "srn.gpkg", delete_dsn = TRUE)
  # Release data:
  if (FASLE) {
    system("gh release upload v1.0 srn.gpkg --clobber")
  }
}
srn = sf::read_sf("srn.gpkg")
```

After downloading and combining the datasets, we can plot them as follows with R:

```{r}
#| label: combine-srn-mrn
#| echo: true
mrn_srn = rbind(mrn, srn)
# mrn_srn |>
#   ggplot() +
#   geom_sf(aes(color = infrastructure_type)) +
#   theme_void() 
names(mrn_srn)
mrn |>
  tm_shape() +
  tm_lines(col = "grey") +
  tm_shape(srn) +
  tm_lines() +
  tm_title("SRN (black) and MRN (grey)", just = c("center", "top"))
```

The main focus of the analysis presented in this report is the SRN, the road network controlled by National Highways (NH).

## Active travel potential

Data on active travel potential was taken from the Propensity to Cycle Tool (PCT), a Department for Transport funded project that builds on official data to model cycling potential nationwide.
In future we would like to add data representing walking potential, possibly based on travel to school data.

# Active travel potential

As a first approximation of active travel potential, we calculated cycling potential from the Propensity to Cycle Tool (PCT) data.
To ensure consistency across areas, we defined 'cycling potential' in this case as the distance that could be cycled *within* each grid cell, reducing the influence of variable road lengths on the results (10 100 m segments with cycling potential of 20 has the same impact as a single 5 km segment with cycling potential of 20 trips per day).
We'll aggregate to 5 km resolution so the operations work fast for national data, as a starter for 10, and smooth the data to remove noise.

```{r}
#| label: dl-pct
if (!file.exists("pct.gpkg")) {
  remotes::install_cran("pct")
  pct_rnet = pct::get_pct(layer = "rnet", national = TRUE)
  pct_projected = pct_rnet |>
    sf::st_transform(27700)
  pct_projected$segment_length_km = sf::st_length(pct_projected) / 1000 |>
    as.numeric()
  pct_projected = pct_projected |>
    mutate(
      cycling_km_baseline = bicycle * segment_length_km,
      cycling_km_go_dutch = dutch_slc * segment_length_km
    )
  sf::write_sf(pct_projected, "pct.gpkg", delete_dsn = TRUE)
}
pct = sf::read_sf("pct.gpkg")
names(pct)
```

We'll convert the pct linestring data to a 5 km raster grid with the {terra} package.

```{r}
#| label: pct-raster
#| layout-ncol: 2
pct_raster = terra::rast(pct, res = 5000)
# ?rasterize
pct_raster_baseline = terra::rasterize(pct, pct_raster, field = "cycling_km_baseline", fun = sum)
pct_raster_go_dutch = terra::rasterize(pct, pct_raster, field = "cycling_km_go_dutch", fun = sum)
# par(mfrow = c(1, 2))
# plot(pct_raster_baseline, type = "interval", breaks = c(0, 1, 2, 5, 10, 20, 100)*1000)
# plot(pct_raster_go_dutch, type = "interval", breaks = c(0, 1, 2, 5, 10, 20, 100)*1000)
# par(mfrow = c(1, 1))
brks = c(0, 1, 5, 10, 20, 100)*1000
m1 = tm_shape(pct_raster_baseline) +
  tm_raster("cycling_km_baseline", palette = "viridis", breaks = brks)
m2 = tm_shape(pct_raster_go_dutch) +
  tm_raster("cycling_km_go_dutch", palette = "viridis", breaks = brks)
tmap_arrange(m1, m2)
```

We can subset all grids with high cycling potential (e.g. 5000 km cycling potential) and extract nearby roads to calculate severance as follows:

```{r}
#| cache: false
if (!file.exists("pct_raster_sf.gpkg")) {

pct_raster_sf = pct_raster_go_dutch |>
  terra::as.points() |>
  sf::st_as_sf()
sf::st_write(pct_raster_sf, "pct_raster_sf.gpkg", delete_dsn = TRUE)
}
pct_raster_sf = sf::read_sf("pct_raster_sf.gpkg")

```

```{r}
#| label: severance
pct_high_potential_points = pct_raster_sf |>
  filter(cycling_km_go_dutch > 5000)
pct_high_buffer = pct_high_potential_points |>
  sf::st_buffer(5000) |>
  sf::st_union() 
if (!file.exists("mrn_srn_high.gpkg")) {
mrn_srn_high = mrn_srn[pct_high_buffer, ]
sf::write_sf(mrn_srn_high, "mrn_srn_high.gpkg", delete_dsn = TRUE)
}
mrn_srn_high = sf::read_sf("mrn_srn_high.gpkg")
tm_shape(mrn_srn) +
  tm_lines(col = "grey") +
  tm_shape(mrn_srn_high) +
  tm_lines(col = "infrastructure_type", palette = "Set1")
```

